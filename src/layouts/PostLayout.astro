---
import "katex/dist/katex.css";
import "#/styles/global.css";
import { format, formatISO } from "date-fns";
import { zhCN } from "date-fns/locale";
import InfoCard from "#/assets/info-card.png";
import Comment from "#/components/Comment.astro";
import type { IFrontmatter } from "#/content";
import Layout from "./Layout.astro";

export interface Props {
  frontmatter: IFrontmatter;
  id: string;
}

const { frontmatter, id } = Astro.props;

const pubDateISO = formatISO(frontmatter.pubDate);
---

<Layout title={`${frontmatter.title} - 极速蜗牛的博客`}>
  <meta
    slot="head"
    property="og:title"
    content={`${frontmatter.title} - 极速蜗牛的博客`}
  />
  <meta slot="head" property="og:image" content={InfoCard.src} />
  <main class="content">
    <h1 transition:name={`title-${id}`}>{frontmatter.title}</h1>
    <p>
      发布于
      <publish-time>
        <time id="publish-date" data-pubdate={pubDateISO} datetime={pubDateISO}>
          {format(frontmatter.pubDate, "PPP H:mm", { locale: zhCN })}
        </time>
      </publish-time>
    </p>
    {
      frontmatter.tags ? (
        <p>
          标签：
          {frontmatter.tags.map((tag) => (
            <span class="tag">{tag}</span>
          ))}
        </p>
      ) : null
    }

    <hr />
    <slot />
    <Comment />
  </main>
  <script>
    import { formatDistanceToNow, parseISO } from "date-fns";
    import { zhCN } from "date-fns/locale";

    class PublishTime extends HTMLElement {
      connectedCallback() {
        const timeElement =
          this.querySelector<HTMLTimeElement>("time#publish-date");
        const pubDateISO = timeElement?.dataset.pubdate;
        if (pubDateISO) {
          const relativeDate = formatDistanceToNow(parseISO(pubDateISO), {
            addSuffix: true,
            locale: zhCN,
          });
          relativeDate && (timeElement.textContent += `（${relativeDate}）`);
        }
      }
    }

    customElements.define("publish-time", PublishTime);
  </script>
</Layout>

<style is:global>
  main.content {
    padding: 1.5rem;
  }

  main.content a.anchor-link {
    font-size: smaller;
    color: transparent;
    margin-left: 1ch;
  }

  main.content *:hover > a.anchor-link {
    color: cornflowerblue;
  }

  main.content a:hover,
  main.content a:focus {
    color: royalblue;
  }

  main.content blockquote {
    border: 1px solid #999;
    color: #222;
    padding: 2px 0 2px 20px;
    margin: 0;
    font-style: italic;
  }

  main.content table {
    border-collapse: collapse;
  }

  main.content th,
  main.content td {
    border: 1px #222 solid;
    padding: 5px;
  }

  main.content kbd {
    border: 2px solid #cdcdcd;
    border-radius: 0.25rem;
    box-shadow: inset 0 -1px 0 0 #cdcdcd;
    font-size: 0.825rem;
    padding: 0.25rem;
  }

  main.content img {
    max-width: 100%;
  }

  .tag {
    margin-right: 0.5rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    background-color: #f0f0f0;
    color: #333;
  }
</style>
